#include <stdio.h>
#include <string.h>
#include <locale.h>
#include <ctype.h>

#define MAX_ALUNOS 100

typedef struct {
    char nome[50];
    char RGM[20];
    char senha[20];
    float mediaFinal;
    char situacao[15];  // "Aprovado" ou "Reprovado"
} Aluno;

Aluno alunos[MAX_ALUNOS];
int qtdAlunos = 0;

// Funções auxiliares

int rgmExiste(const char *rgm) {
    for (int i = 0; i < qtdAlunos; i++) {
        if (strcmp(alunos[i].RGM, rgm) == 0) {
            return 1;
        }
    }
    return 0;
}

int validaNome(const char *nome) {
    if (strlen(nome) == 0) return 0;
    for (int i = 0; nome[i] != '\0'; i++) {
        if (!isalpha(nome[i]) && nome[i] != ' ') {
            return 0;
        }
    }
    return 1;
}

int validaNumeros(const char *str) {
    if (strlen(str) == 0) return 0;
    for (int i = 0; str[i] != '\0'; i++) {
        if (!isdigit(str[i])) {
            return 0;
        }
    }
    return 1;
}

void CadastrarAluno() {
    if (qtdAlunos >= MAX_ALUNOS) {
        printf("Limite de alunos cadastrados atingido.\n");
        return;
    }

    Aluno novoAluno;
    printf("\n--- Cadastrar Aluno ---\n");

    do {
        printf("Digite o nome do aluno: ");
        fgets(novoAluno.nome, sizeof(novoAluno.nome), stdin);
        novoAluno.nome[strcspn(novoAluno.nome, "\n")] = '\0';
        if (!validaNome(novoAluno.nome)) {
            printf("Nome inválido! Use apenas letras e espaços.\n");
        } else {
            break;
        }
    } while (1);

    do {
        printf("Digite o RGM do aluno: ");
        fgets(novoAluno.RGM, sizeof(novoAluno.RGM), stdin);
        novoAluno.RGM[strcspn(novoAluno.RGM, "\n")] = '\0';
        if (!validaNumeros(novoAluno.RGM)) {
            printf("RGM inválido! Use apenas números.\n");
        } else if (rgmExiste(novoAluno.RGM)) {
            printf("RGM já cadastrado! Digite outro.\n");
        } else {
            break;
        }
    } while (1);

    do {
        printf("Digite a senha do aluno: ");
        fgets(novoAluno.senha, sizeof(novoAluno.senha), stdin);
        novoAluno.senha[strcspn(novoAluno.senha, "\n")] = '\0';
        if (!validaNumeros(novoAluno.senha)) {
            printf("Senha inválida! Use apenas números.\n");
        } else {
            break;
        }
    } while (1);

    novoAluno.mediaFinal = 0.0;
    strcpy(novoAluno.situacao, "N/A");

    alunos[qtdAlunos] = novoAluno;
    qtdAlunos++;

    printf("Aluno cadastrado com sucesso!\n");
}

void LoginAluno() {
    if (qtdAlunos == 0) {
        printf("\nNenhum aluno cadastrado para login.\n");
        return;
    }

    char rgmLogin[20];
    char senhaLogin[20];
    int indiceAluno = -1;

    printf("\n--- Login do Aluno ---\n");
    printf("Digite o RGM: ");
    fgets(rgmLogin, sizeof(rgmLogin), stdin);
    rgmLogin[strcspn(rgmLogin, "\n")] = '\0';

    printf("Digite a senha: ");
    fgets(senhaLogin, sizeof(senhaLogin), stdin);
    senhaLogin[strcspn(senhaLogin, "\n")] = '\0';

    for (int i = 0; i < qtdAlunos; i++) {
        if (strcmp(alunos[i].RGM, rgmLogin) == 0 && strcmp(alunos[i].senha, senhaLogin) == 0) {
            indiceAluno = i;
            break;
        }
    }

    if (indiceAluno == -1) {
        printf("Login falhou! RGM ou senha incorretos.\n");
        return;
    }

    printf("Login realizado com sucesso! Bem-vindo, %s.\n", alunos[indiceAluno].nome);

    float A1, A2, AF;
    int validInput;

    do {
        printf("Digite a nota da A1 (0 a 10): ");
        validInput = scanf("%f", &A1);
        while (getchar() != '\n');
        if (!validInput || A1 < 0 || A1 > 10) {
            printf("Nota inválida. Digite um valor entre 0 e 10.\n");
        } else {
            break;
        }
    } while (1);

    do {
        printf("Digite a nota da A2 (0 a 10): ");
        validInput = scanf("%f", &A2);
        while (getchar() != '\n');
        if (!validInput || A2 < 0 || A2 > 10) {
            printf("Nota inválida. Digite um valor entre 0 e 10.\n");
        } else {
            break;
        }
    } while (1);

    if ((A1 + A2) / 2 < 6) {
        printf("Aluno precisa fazer Avaliação Final (AF).\n");
        do {
            printf("Digite a nota da AF (0 a 10): ");
            validInput = scanf("%f", &AF);
            while (getchar() != '\n');
            if (!validInput || AF < 0 || AF > 10) {
                printf("Nota inválida. Digite um valor entre 0 e 10.\n");
            } else {
                break;
            }
        } while (1);

        if (A1 < A2) {
            A1 = AF;
        } else {
            A2 = AF;
        }
    }

    float mediaFinal = (A1 + A2) / 2;
    alunos[indiceAluno].mediaFinal = mediaFinal;

    if (mediaFinal >= 6) {
        strcpy(alunos[indiceAluno].situacao, "Aprovado");
    } else {
        strcpy(alunos[indiceAluno].situacao, "Reprovado");
    }

    printf("\n--- Relatório do Aluno ---\n");
    printf("Aluno: %s\n", alunos[indiceAluno].nome);
    printf("RGM: %s\n", alunos[indiceAluno].RGM);
    printf("Nota A1: %.2f\n", A1);
    printf("Nota A2: %.2f\n", A2);
    printf("Média Final: %.2f\n", mediaFinal);
    printf("Situação: %s\n", alunos[indiceAluno].situacao);
}

void RelatorioAlunos() {
    if (qtdAlunos == 0) {
        printf("\nNenhum aluno cadastrado.\n");
        return;
    }

    printf("\n--- Relatório de Alunos ---\n");
    for (int i = 0; i < qtdAlunos; i++) {
        printf("Aluno %d:\n", i + 1);
        printf("Nome: %s\n", alunos[i].nome);
        printf("RGM: %s\n", alunos[i].RGM);
        printf("Média Final: %.2f\n", alunos[i].mediaFinal);
        printf("Situação: %s\n\n", alunos[i].situacao);
    }
}

void ListaAlunos() {
    if (qtdAlunos == 0) {
        printf("\nNenhum aluno cadastrado.\n");
        return;
    }

    printf("\n--- Lista de Alunos ---\n");
    for (int i = 0; i < qtdAlunos; i++) {
        printf("Aluno %d:\n", i + 1);
        printf("Nome: %s\n", alunos[i].nome);
        printf("RGM: %s\n", alunos[i].RGM);
        printf("Senha: %s\n\n", alunos[i].senha);
    }
}

void AtualizarAluno() {
    if (qtdAlunos == 0) {
        printf("\nNenhum aluno cadastrado para atualizar.\n");
        return;
    }

    char rgmBusca[20];
    printf("Digite o RGM do aluno que deseja atualizar: ");
    fgets(rgmBusca, sizeof(rgmBusca), stdin);
    rgmBusca[strcspn(rgmBusca, "\n")] = '\0';

    for (int i = 0; i < qtdAlunos; i++) {
        if (strcmp(alunos[i].RGM, rgmBusca) == 0) {
            printf("Aluno encontrado: %s\n", alunos[i].nome);

            do {
                printf("Digite o novo nome: ");
                fgets(alunos[i].nome, sizeof(alunos[i].nome), stdin);
                alunos[i].nome[strcspn(alunos[i].nome, "\n")] = '\0';
                if (!validaNome(alunos[i].nome)) {
                    printf("Nome inválido! Use apenas letras e espaços.\n");
                } else {
                    break;
                }
            } while (1);

            do {
                printf("Digite a nova senha: ");
                fgets(alunos[i].senha, sizeof(alunos[i].senha), stdin);
                alunos[i].senha[strcspn(alunos[i].senha, "\n")] = '\0';
                if (!validaNumeros(alunos[i].senha)) {
                    printf("Senha inválida! Use apenas números.\n");
                } else {
                    break;
                }
            } while (1);

            printf("Aluno atualizado com sucesso!\n");
            return;
        }
    }

    printf("Aluno com RGM %s não encontrado.\n", rgmBusca);
}

void DeletarAluno() {
    if (qtdAlunos == 0) {
        printf("\nNenhum aluno cadastrado para deletar.\n");
        return;
    }

    char rgmBusca[20];
    printf("Digite o RGM do aluno que deseja deletar: ");
    fgets(rgmBusca, sizeof(rgmBusca), stdin);
    rgmBusca[strcspn(rgmBusca, "\n")] = '\0';

    for (int i = 0; i < qtdAlunos; i++) {
        if (strcmp(alunos[i].RGM, rgmBusca) == 0) {
            for (int j = i; j < qtdAlunos - 1; j++) {
                alunos[j] = alunos[j + 1];
            }
            qtdAlunos--;
            printf("Aluno deletado com sucesso!\n");
            return;
        }
    }

    printf("Aluno com RGM %s não encontrado.\n", rgmBusca);
}

int main() {
    setlocale(LC_ALL, "Portuguese");

    int opcao;

    do {
        printf("\n--- Sistema de Cadastro de Alunos ---\n");
        printf("1. Cadastrar Aluno\n");
        printf("2. Login do Aluno\n");
        printf("3. Relatório de Alunos\n");
        printf("4. Lista de Alunos (Admin)\n");
        printf("5. Atualizar Aluno\n");
        printf("6. Deletar Aluno\n");
        printf("0. Sair\n");
        printf("Escolha uma opção: ");
        scanf("%d", &opcao);
        while (getchar() != '\n');

        switch (opcao) {
            case 1: CadastrarAluno(); break;
            case 2: LoginAluno(); break;
            case 3: RelatorioAlunos(); break;
            case 4: ListaAlunos(); break;
            case 5: AtualizarAluno(); break;
            case 6: DeletarAluno(); break;
            case 0: printf("Saindo...\n"); break;
            default: printf("Opção inválida. Tente novamente.\n");
        }
    } while (opcao != 0);

    return 0;
}
